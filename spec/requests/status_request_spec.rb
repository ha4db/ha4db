# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/status.json', type: :request do
  before do
    @bridge = FactoryBot.create(:bridge)
  end

  describe 'GET /status.json' do
    it 'renders a successful response' do
      get '/status.json'
      expect(response).to be_successful
      expect(response_body['bridge_count']).to eq(1)
      expect(response_body['message']).to be_nil
    end

    it 'raise error, message is not null' do
      allow(Bridge).to receive(:count).and_raise('some error')
      get '/status.json'
      expect(response).not_to be_successful
      expect(response_body['bridge_count']).to eq(0)
      expect(response_body['message']).to eq('some error')
    end
  end

  def response_body
    JSON.parse(response.body)
  end
end
