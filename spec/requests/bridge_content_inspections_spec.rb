# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# rubocop:disable Metrics/BlockLength
RSpec.describe '/bridge_content_inspections', type: :request do
  before do
    @user = FactoryBot.create(:user)
    allow_any_instance_of(ActionDispatch::Request).to receive(:session).and_return({ user_id: @user.id })
    @bridge = FactoryBot.create(:bridge)
    @bridge_content = FactoryBot.create(:bridge_content, bridge: @bridge)
    @inspection = FactoryBot.create(:inspection, bridge: @bridge)
  end

  # BridgeContentInspection. As you add validations to BridgeContentInspection, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.build(:bridge_content_inspection, bridge_content: @bridge_content, inspection: @inspection).attributes
  end

  let(:invalid_attributes) do
    bridge_content_inspection = FactoryBot.build(:bridge_content_inspection, bridge_content: @bridge_context)
    bridge_content_inspection.bridge_content = nil
    bridge_content_inspection.attributes
  end

  let(:inspection_valid_attribute) do
    @inspection.attributes
  end

  let(:inspection_invalid_attribute) do
    @inspection.title = nil
    @inspection.attributes
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      BridgeContentInspection.create! valid_attributes
      get bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      bridge_content_inspection = BridgeContentInspection.create! valid_attributes
      get bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      bridge_content_inspection = BridgeContentInspection.create! valid_attributes
      get edit_bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new BridgeContentInspection' do
        expect do
          post bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content),
               params: { bridge_content_inspection: valid_attributes, inspection: inspection_valid_attribute }
        end.to change(BridgeContentInspection, :count).by(1)
      end

      it 'redirects to the created bridge_content_inspection' do
        post bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content),
             params: { bridge_content_inspection: valid_attributes, inspection: inspection_valid_attribute }
        expect(response).to redirect_to(bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content,
                                                                                            BridgeContentInspection.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new BridgeContentInspection' do
        expect do
          post bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content),
               params: { bridge_content_inspection: invalid_attributes, inspection: inspection_invalid_attribute }
        end.to change(BridgeContentInspection, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content),
             params: { bridge_content_inspection: invalid_attributes, inspection: inspection_invalid_attribute }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        current_attributes = valid_attributes
        current_attributes['seek'] = 20
        current_attributes
      end

      it 'updates the requested bridge_content_inspection' do
        bridge_content_inspection = BridgeContentInspection.create! valid_attributes
        patch bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection),
              params: { bridge_content_inspection: new_attributes, inspection: inspection_valid_attribute }
        bridge_content_inspection.reload
        expect(bridge_content_inspection.seek).to eq '20'
      end

      it 'redirects to the bridge_content_inspection' do
        bridge_content_inspection = BridgeContentInspection.create! valid_attributes
        patch bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection),
              params: { bridge_content_inspection: new_attributes, inspection: inspection_valid_attribute }
        bridge_content_inspection.reload
        expect(response).to redirect_to(bridge_bridge_content_bridge_content_inspection_url(@bridge,
                                                                                            @bridge_content,
                                                                                            bridge_content_inspection))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        bridge_content_inspection = BridgeContentInspection.create! valid_attributes
        patch bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection),
              params: { bridge_content_inspection: valid_attributes, inspection: inspection_invalid_attribute }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested bridge_content_inspection' do
      bridge_content_inspection = BridgeContentInspection.create! valid_attributes
      expect do
        delete bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection)
      end.to change(BridgeContentInspection, :count).by(-1)
    end

    it 'redirects to the bridge_content_inspections list' do
      bridge_content_inspection = BridgeContentInspection.create! valid_attributes
      delete bridge_bridge_content_bridge_content_inspection_url(@bridge, @bridge_content, bridge_content_inspection)
      expect(response).to redirect_to(bridge_bridge_content_bridge_content_inspections_url(@bridge, @bridge_content))
    end
  end
end
# rubocop:enable Metrics/BlockLength
