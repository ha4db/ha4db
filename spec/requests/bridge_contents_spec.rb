# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# rubocop:disable Metrics/BlockLength
RSpec.describe '/bridge_contents', type: :request do
  before do
    @user = FactoryBot.create(:user)
    allow_any_instance_of(ActionDispatch::Request).to receive(:session).and_return({ user_id: @user.id })
    @regular_inspection = FactoryBot.create(:regular_inspection)
  end

  # BridgeContent. As you add validations to BridgeContent, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes = FactoryBot.build(:bridge_content, regular_inspection: @regular_inspection).attributes
    attributes['data'] = fixture_file_upload(Rails.root.join('spec', 'testdata', 'testimage.jpg'))
    attributes
  end

  let(:invalid_attributes) do
    attributes = FactoryBot.build(:bridge_content, regular_inspection: @regular_inspection).attributes
    attributes['title'] = ''
    attributes
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      BridgeContent.create! valid_attributes
      get regular_inspection_bridge_contents_url(@regular_inspection)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      bridge_content = BridgeContent.create! valid_attributes
      get regular_inspection_bridge_content_url(@regular_inspection, bridge_content)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_regular_inspection_bridge_content_url(@regular_inspection)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      bridge_content = BridgeContent.create! valid_attributes
      get edit_regular_inspection_bridge_content_url(@regular_inspection, bridge_content)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new BridgeContent' do
        expect do
          post regular_inspection_bridge_contents_url(@regular_inspection), params: { bridge_content: valid_attributes }
        end.to change(BridgeContent, :count).by(1)
      end

      it 'redirects to the created bridge_content' do
        post regular_inspection_bridge_contents_url(@regular_inspection), params: { bridge_content: valid_attributes }
        expect(response).to redirect_to(regular_inspection_bridge_content_url(@regular_inspection, BridgeContent.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new BridgeContent' do
        expect do
          post regular_inspection_bridge_contents_url(@regular_inspection),
               params: { bridge_content: invalid_attributes }
        end.to change(BridgeContent, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post regular_inspection_bridge_contents_url(@regular_inspection), params: { bridge_content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes = valid_attributes
        attributes['data'] = fixture_file_upload(Rails.root.join('spec', 'testdata', 'testmovie.mp4'))
        attributes
      end

      it 'updates the requested bridge_content' do
        bridge_content = BridgeContent.create! valid_attributes
        patch regular_inspection_bridge_content_url(@regular_inspection, bridge_content),
              params: { bridge_content: new_attributes }
        bridge_content.reload
        expect(bridge_content.data.content_type).to eq('video/mp4')
      end

      it 'redirects to the bridge_content' do
        bridge_content = BridgeContent.create! valid_attributes
        patch regular_inspection_bridge_content_url(@regular_inspection, bridge_content),
              params: { bridge_content: new_attributes }
        bridge_content.reload
        expect(response).to redirect_to(regular_inspection_bridge_content_url(@regular_inspection, bridge_content))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        bridge_content = BridgeContent.create! valid_attributes
        patch regular_inspection_bridge_content_url(@regular_inspection, bridge_content),
              params: { bridge_content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested bridge_content' do
      bridge_content = BridgeContent.create! valid_attributes
      expect do
        delete regular_inspection_bridge_content_url(@regular_inspection, bridge_content)
      end.to change(BridgeContent, :count).by(-1)
    end

    it 'redirects to the bridge_contents list' do
      bridge_content = BridgeContent.create! valid_attributes
      delete regular_inspection_bridge_content_url(@regular_inspection, bridge_content)
      expect(response).to redirect_to(regular_inspection_bridge_contents_url(@regular_inspection))
    end
  end
end
# rubocop:enable Metrics/BlockLength
